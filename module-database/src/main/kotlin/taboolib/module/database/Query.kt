package taboolib.module.database

import java.sql.Statement
import javax.sql.DataSource

/**
 * TabooLib
 * taboolib.module.database.Query
 *
 * @author sky
 * @since 2021/6/23 2:02 下午
 */
open class Query(val table: Table, var dataSource: DataSource? = null) {

    open fun createTable(dataSource: DataSource, checkExists: Boolean = true) {
        executeUpdate(table.generateCreateQuery(checkExists))
    }

    open fun select(table: String, func: ActionSelect.() -> Unit) {
    }

    open fun update(func: ActionUpdate.() -> Unit = {}) {
    }

    open fun delete(func: ActionDelete.() -> Unit = {}) {
    }

    open fun insert(func: ActionInsert.() -> Unit = {}) {
    }

    open fun insertUnsafe(vararg objects: Any?) {
    }

    open fun executeQuery(query: String, autoGeneratedKeys: Int = Statement.RETURN_GENERATED_KEYS) {
        dataSource ?: error("no datasource")
        dataSource!!.connection.use {
            val prepareStatement = prepareStatement(query, autoGeneratedKeys)
            prepareStatement.executeQuery().use {

            }
        }
    }

    open fun executeUpdate(query: String) {
        dataSource ?: error("no datasource")
    }

    open fun callback(): QueryCallback {
        error(1)
    }

    open fun Table.generateCreateQuery(checkExists: Boolean = true): String {
        if (columns.isEmpty()) {
            error("no column")
        }
        val attributes = arrayListOf(columns.joinToString { it.query })
        if (primaryKeyForLegacy.isNotEmpty()) {
            attributes += "PRIMARY KEY (${primaryKeyForLegacy.joinToString { "`$it`" }})"
        }
        columns.filter { it is ColumnSQL && it.options.contains(ColumnOptionSQL.KEY) }
            .map { it as ColumnSQL }
            .groupBy { it.indexType }
            .forEach { (key, value) ->
                var query = "KEY `idx_${value.joinToString("_") { it.name }}` (${value.joinToString { "`${it.name}`${if (it.desc) " desc" else ""}" }})"
                if (key != IndexType.DEFAULT) {
                    query += " USING $key"
                }
                attributes += query
            }
        columns.filter { it is ColumnSQL && it.options.contains(ColumnOptionSQL.UNIQUE_KEY) }
            .map { it as ColumnSQL }
            .groupBy { it.indexType }
            .forEach { (key, value) ->
                var query = "UNIQUE KEY `uk_${value.joinToString("_") { it.name }}` (${value.joinToString { "`${it.name}`${if (it.desc) " desc" else ""}" }})"
                if (key != IndexType.DEFAULT) {
                    query += " USING $key"
                }
                attributes += query
            }
        return "CREATE TABLE ${if (checkExists) "IF NOT EXISTS " else ""}`$name` (${attributes.joinToString()})"
    }
}